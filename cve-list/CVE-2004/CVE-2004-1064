Name: CVE-2004-1064
Status: Candidate
URL: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1064
Phase: Assigned (20041123)
Category: SF
Reference: BUGTRAQ:20041215 Advisory 01/2004: Multiple vulnerabilities in PHP 4/5
Reference: URL:http://www.securityfocus.com/archive/1/384545
Reference: MISC:http://www.hardened-php.net/advisories/012004.txt
Reference: CONFIRM:http://www.php.net/release_4_3_10.php
Reference: CONECTIVA:CLA-2005:915
Reference: URL:http://distro.conectiva.com.br/atualizacoes/?id=a&anuncio=000915
Reference: GENTOO:GLSA-200412-14
Reference: URL:http://www.gentoo.org/security/en/glsa/glsa-200412-14.xml
Reference: HP:HPSBMA01212
Reference: URL:http://www.securityfocus.com/advisories/9028
Reference: MANDRAKE:MDKSA-2004:151
Reference: URL:http://www.mandriva.com/security/advisories?name=MDKSA-2004:151
Reference: MANDRAKE:MDKSA-2005:072
Reference: URL:http://www.mandriva.com/security/advisories?name=MDKSA-2005:072
Reference: UBUNTU:USN-99-1
Reference: URL:https://www.ubuntu.com/usn/usn-99-1/
Reference: UBUNTU:USN-99-2
Reference: URL:https://www.ubuntu.com/usn/usn-99-2/
Reference: BID:11964
Reference: URL:http://www.securityfocus.com/bid/11964
Reference: XF:php-realpath-safemode-bypass(18512)
Reference: URL:https://exchange.xforce.ibmcloud.com/vulnerabilities/18512

The safe mode checks in PHP 4.x to 4.3.9 and PHP 5.x to 5.0.2 truncate
the file path before passing the data to the realpath function, which
could allow attackers to bypass safe mode.  NOTE: this issue was
originally REJECTed by its CNA before publication, but that decision
is in active dispute.  This candidate may change significantly in the
future as a result of further discussion.


Current Votes:
   REVIEWING(1) Christey

Voter Comments:
 Christey> There is active disagreement regarding whether this satisfies the
   criteria for inclusion in CVE, because the attack vectors require
   function parameters that are typically controlled only by the
   application developer, not an external attacker.  This would mean that
   only the PHP application owner could exploit it.
   
   Since various PHP functions already allow the application owner to
   execute commands, no additional privileges would be gained by
   exploiting such a bug.  However, if safe_mode is enabled in PHP, then
   the PHP functions related to execution are restricted
   (e.g. shell_exec()).  Thus, exploitation may allow the PHP application
   owner to execute code *despite* the configured restrictions imposed by
   safe mode, which then qualifies this as a vulnerability.


